package nimble;

import java.io.FileInputStream;
import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;
import java.util.TreeMap;

import org.jopendocument.dom.spreadsheet.Sheet;

import com.relevantcodes.extentreports.ExtentReports;
import com.relevantcodes.extentreports.ExtentTest;
import com.relevantcodes.extentreports.LogStatus;

public class Runner 
{
	static Sheet sheet;
	public static ExtentReports reporter;
	public static ExtentTest test;
	public static String sprintName,browser,testdata, testset, customer, projectName, projecttype, testtype;
	public static Properties elements;
	public static Properties configproperties;
	public static String screenshotLocation;
	
	
	public static List<String> getTestCaseNames(int n) throws Exception
	{
		sheet = Configurator.sheets().getSheet(n);
		List<String> testCase = new ArrayList<String>();
		for(int row=1;row<sheet.getRowCount();row++)
		{
			if((!sheet.getValueAt(0, row).equals("")))
			{
				testCase.add((String) sheet.getValueAt(0, row));
			}
		}
			return testCase;
	}
	
	public static List<Integer> getTestCaseIndex(int n) throws Exception
	{
		sheet = Configurator.sheets().getSheet(n);
		List<Integer> testIndex = new ArrayList<Integer>();
		for(int row=1;row<sheet.getRowCount();row++)
		{
			if((!sheet.getValueAt(0, row).equals("")))
			{
				testIndex.add(row);
			}
		}
			return testIndex;
	}
	
	public static void setParams(String arguments[]) {
		testset = arguments[0];
		sprintName = arguments[1];
		testdata = arguments[2];
		customer = arguments[3];
		projectName = arguments[4];
		projecttype = arguments[5];
		testtype = arguments[6];
	}
	
	
	public static String[] getParamTypes(String args[])
	{
		String[] params = new String[2];
		if(args[0].equalsIgnoreCase("all")) {
				params[0] = args[0];
				params[1] = null;
				
		}
		else if(!args[0].equalsIgnoreCase("all")&&(!args[0].contains(":"))) {
				params[0] = args[0];
				params[1] = null;
		}
		else if(args[0].contains(":")) {
				params[0] = args[0].split(":")[0];
				params[1] = args[0].split(":")[1];
		}
		
		return params;
	}
	
	
	public static Map<Integer, Integer> getTestCaseRange(List<Integer> list)
	{
		int[] values = new int[2];
		Map<Integer, Integer> testCaseBoundary = new TreeMap<Integer, Integer>();
		for(int i=0;i<=list.size()-1;i++)
		{
			if(i!=list.size()-1)
			{
				values[0] =	list.get(i);
				values[1] = list.get(i+1)-1;
			}
			else if(i==list.size()-1)
			{
				values[0] =list.get(i);
				List<Integer> endValue = new ArrayList<Integer>();
				for(int m=list.get(list.size()-1);m<sheet.getRowCount();m++)
				{
					if((!sheet.getValueAt(1,m).equals("")))
					{
						endValue.add(m);
					}
				}
					values[1] = ((endValue.size()+values[0])-1);
			}			
					testCaseBoundary.put(values[0], values[1]);
		}
			return testCaseBoundary;
	}
	
	public static Properties properties(String propertyFilePath) throws Exception
	{
		FileInputStream inputStream = new FileInputStream(propertyFilePath);
		Properties prop = new Properties();
		prop.load(inputStream);
		return prop;
	}
	
	public static void main(String args[]) throws Exception {
		String[] param = new String[2];
		param = getParamTypes(args);
		setParams(args);
		System.out.println(args[0]+" "+args[1]+" "+args[2]+" "+args[3]+" "+args[4]+" "+args[5]+" "+args[6]);
		configproperties =properties("./resources/configuration.properties");
		screenshotLocation = configproperties.getProperty("MOUNTPATH").trim()+"/"+projectName+"/"+projecttype+"/"+customer+"/"+sprintName+"/"+testtype+"/Reports/Screenshot";
		elements = properties(configproperties.getProperty("CONFIGELEMENTLOCATION"));
		
		String excel = configproperties.getProperty("TESTDATALOCATION").trim()+testdata;									
		System.out.println(excel);
		
		Configurator _load = new Configurator(excel);
		Worker worker = new Worker(elements, test);
		Helper helper = new Helper(screenshotLocation);
		serializeTestCase(param[0], param[1]);
		
	}
	
	public static void serializeTestCase(String name1, String name2) throws Exception
	{
		List<Integer> number = ArrangeTestSet.serializeExecution(name1, name2);
		for(int n=0;n<number.size();n++)
		{
			List<Integer> test_index =getTestCaseIndex(number.get(n));
			Map<Integer, Integer> caseBoundary = new TreeMap<Integer, Integer>();
			caseBoundary = getTestCaseRange(test_index);
			System.out.println("CASEBOUNDARY===>"+caseBoundary);
			execute(caseBoundary);
		}
	}
	
	public static List<String> getParamList(int rowNum)
	{
		List<String> paramList = new ArrayList<String>();
		for(int col=2;col<sheet.getColumnCount();col++)
		{
			if((!sheet.getValueAt(col, rowNum).equals("")))
			{
				paramList.add(sheet.getValueAt(col, rowNum).toString().trim());
			}
		}
		System.out.println(paramList);
			return paramList;
	}
	
	public static Class<?>[] getParams(List<String> values)
	{
		System.out.println(values);
		System.out.println(values.size());
		Class<?> params[] =new Class[values.size()];
		for(int j=0;j<values.size();j++)
		{
			if(values.get(j) instanceof String)
			{
				System.out.println(values.get(j));
				params[j]=String.class;
			}
		}
			return params;
	}
	
	
	public static void execute(Map<Integer, Integer> caseLimit) throws Exception
	{
		List<String> values = new ArrayList<String>();
		int start, end;
		String methodName = "";
		boolean flag = false;
		outerloop:
		for(Entry<Integer, Integer> value: caseLimit.entrySet())
		{
			try
			{
				String testcase = (String) sheet.getValueAt(0,value.getKey());
				System.out.println("=====>"+testcase);
				System.out.println(test);
				System.out.println(reporter);
//				test = reporter.startTest(testcase);
				start = value.getKey();
				end = value.getValue();	
				System.out.println("Start   "+start);
				System.out.println("End "+end);
				innerloop:
				for(;start<=end;start++)
				{
					values = getParamList(start);
					System.out.println("VALUES====>"+values);
					Class<?> param[] = getParams(values);	
					System.out.println("PARAM         "+param);
					methodName = sheet.getValueAt(1, start).toString();
					flag = executeRun(start, methodName.toLowerCase().trim(), param, values, "nimble.Worker", test);	/* method name in lowercase */
					values.clear();
					param = null;
					if(!flag)
					{
						break innerloop;
					}
				}
//					reporter.endTest(test);
			}
			finally 
			{
//				reporter.endTest(test);
			}
		}
//			reporter.flush();
	}
	
	
	public static boolean executeRun(int start, String methodname, Class<?>[] parameter, List<String> val, String className, ExtentTest test) throws ClassNotFoundException, InstantiationException, IllegalAccessException, IllegalArgumentException, InvocationTargetException
	{
		System.out.println(start);
		System.out.println(methodname);
		System.out.println(parameter);
		System.out.println(val);
		System.out.println(className);
		System.out.println(test);
		
		boolean stats, status = false;
		try
		{
			String classValue = getClassNameForMethods(className, methodname);
			Class<?> TestStep =Class.forName(classValue);
			Constructor<?> cons = TestStep.getConstructor(Properties.class, ExtentTest.class);
			Object testStep = cons.newInstance(elements, test);
			System.out.println("         oooooo  "+testStep);
			Method method;
			if(methodname != null && (!methodname.isEmpty()) && methodname.length() > 0) 
			{
				method =TestStep.getDeclaredMethod(sheet.getValueAt(1, start).toString().trim().toLowerCase(), parameter); /* methodname case insensitive */  
				stats =  (Boolean) method.invoke(testStep,val.toArray());
				if(stats)
				{
					status = true;	
				}
			}
		}
		catch(NoSuchMethodException e)
		{
			System.out.println("\n"+methodname+" Invalid");
			test.log(LogStatus.FATAL, methodname+" Invalid");
		}
		catch(Exception e)
		{
			test.log(LogStatus.ERROR , e.getMessage());
		}
		
			return status;
	}
	
	
	public static String getClassNameForMethods(String className,String methodName) throws ClassNotFoundException
	{
		boolean flag =false;
		Class<?> c = Class.forName(className);
		Method method[] = c.getDeclaredMethods();
		for(Method m: method)
		{
			if(methodName.equals(m.getName()))
			{
				flag = true;
			}
		}	
		if(!flag)
		{
			className = "nimble.Reports";
		}
			return className;
	}
	
	
	public static String htmldata()
	{
		
		return "";
	}
	
	
	
	
	
	

		


		




}
