package nimble;

import java.io.File;
import java.io.FileInputStream;
import java.util.Properties;

import org.jopendocument.dom.spreadsheet.SpreadSheet;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.firefox.FirefoxBinary;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.firefox.internal.ProfilesIni;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.support.ui.Select;


public class Configurator 
{
	public static WebDriver driver;
	public static String _excelFile;
	
	
	public Configurator(String _excelFile) {
		System.out.println(_excelFile);
		this._excelFile = _excelFile;
	}
	
	
	public static  WebDriver browser(String browsername) throws Exception  {
		if(browsername.equalsIgnoreCase("chrome")) {
			System.setProperty("webdriver.chrome.driver", "./Drivers/chromedriver.exe");
			ChromeOptions options = new ChromeOptions();
			options.addArguments("--disable-extensions");
			driver = new ChromeDriver(options);
			driver.manage().window().maximize();
		}
		else if(browsername.equalsIgnoreCase("firefox")) {
			System.setProperty("webdriver.firefox.marionette", "./Drivers/geckodriver.exe");
//			File binaryPath = new File(_firefox);
			FirefoxProfile profile = new FirefoxProfile();
			FirefoxBinary ffBinary = new FirefoxBinary();
			DesiredCapabilities capabilities = DesiredCapabilities.firefox();
			capabilities.setCapability("marionette", true);
			profile.setPreference("browser.download.folderList", 1);
			profile.setPreference("browser.download.manager.alertOnEXEOpen", false);
			profile.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/msword, application/csv, application/ris, text/csv, image/png, application/pdf, text/html, text/plain, application/zip, application/x-zip, application/x-zip-compressed, application/download, application/octet-stream");
			profile.setPreference("browser.download.manager.showWhenStarting", false);
			profile.setPreference("browser.download.manager.focusWhenStarting", false);  
			profile.setPreference("browser.download.useDownloadDir", true);
			profile.setPreference("browser.helperApps.alwaysAsk.force", false);
			profile.setPreference("browser.download.manager.alertOnEXEOpen", false);
			profile.setPreference("browser.download.manager.closeWhenDone", true);
			profile.setPreference("browser.download.manager.showAlertOnComplete", false);
			profile.setPreference("browser.download.manager.useWindow", false);
			profile.setPreference("services.sync.prefs.sync.browser.download.manager.showWhenStarting", false);
			profile.setPreference("pdfjs.disabled", true);
			profile.setPreference("plugin.scan.plid.all", true);
			profile.setPreference("plugin.state.java", 2);
			profile.setPreference("extensions.blocklist.enabled", false);
			capabilities.setCapability(FirefoxDriver.PROFILE, profile);
			driver = new FirefoxDriver(ffBinary,profile,capabilities);
			driver.manage().window().maximize();
		}
		else if(browsername.equalsIgnoreCase("ie"))
		{
			System.setProperty("webdriver.ie.driver", "./Drivers/IEDriverSerever.exe");
			driver = new InternetExplorerDriver();
			driver.manage().window().maximize();
		}
			return driver;		
	}
	
	public static File excelfile() throws Exception
	{
		File file = new File(_excelFile); 
		return file;
	}
	
	public static SpreadSheet sheets() throws Exception
	{
		SpreadSheet sheet = SpreadSheet.createFromFile(excelfile());
		return sheet;
	}
}
